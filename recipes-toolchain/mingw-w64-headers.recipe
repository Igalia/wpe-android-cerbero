import os
from cerbero.utils import messages as m

class Recipe(recipe.Recipe):
    name = 'mingw-w64-headers'
    version = 'v6.0.0'
    licenses = [License.LGPLv2Plus]
    stype = SourceType.CUSTOM
    srcdir = 'mingw-w64-headers'
    configure_options='--enable-sdk=all --enable-secure-api \
            --with-default-msvcrt=ucrtbase '
    add_host_build_target = False
    deps = ['mingw-w64-sources']
    can_msvc = False

    def prepare(self):
        if self.config.target_arch == Architecture.X86:
            raise InvalidRecipeError(self)
        self.host = 'x86_64-w64-mingw32'
        self._sysroot = f'{self.config.prefix}/{self.host}/sysroot'
        self.configure_options.append(f'--with-sysroot={self._sysroot}')
        if self.config.target_platform != self.config.platform:
            self.configure_options.append(f'--host={self.host}')
            self.configure_options.append(f'--target={self.host}')
        self.src_dir = os.path.join(self.config.sources, f'mingw-w64-sources-{self.version}', self.name)
        self.config_src_dir = self.src_dir
        self.build_dir = os.path.join(self.src_dir, "cerbero-build-dir")
        self.make_install += [f'DESTDIR={self._sysroot}']
        self.configure_tpl = "%%(config-sh)s --prefix /usr/%(host)s "\
                "--libdir /usr/%(host)s %%(options)s" % {'host': self.host}

    def post_install(self):
        if not os.path.exists(os.path.join(self._sysroot, 'mingw')):
            shell.symlink('usr/%(host)s' % {'host': self.host}, 'mingw', self._sysroot)
        super().post_install()
